Yesterday, I gave a technical interview for AWS Cloud Full Stack at IBM. 🤓 I'm sharing the questions with you for reference. 📝There were  33 questions, including core java, microservices, cloud, java architecture, etc.

🧨1. public class Main {

public static void main(String[]

int result, x;

x = 1;

result = 0;

while (x <= 10) {

if (x%2 == 0)

result += x;

++x;

}

System.out.println(result);

}

}

Which of the following will be the output ?

Pick ONE option

1️⃣25

2️⃣30✔️

3️⃣50

4️⃣29

🅰️30

🧨2. class ThreadExample implements Runnable{

public void run() {

System.out.print("running");

}

public static void main(String[] args) {

Thread t = new Thread(new ThreadExample())

t.run();

t.run();

t.start();

}

What is the output ?

1️⃣."running"

2️⃣. "runningrunningrunning"

3️⃣. compilation fails✔️

4️⃣. NOT

🅰️. In Java, the start() method should be used to begin the execution of a new thread. However, in this code, the run() method is called directly instead of using start() to create a new thread. This will not create a new thread, and the code will not run concurrently. The correct usage should be t.start() instead of t.run().

🧨3. implementing the Clonable Interface and invoking super.clone() will do

Pick ONE option

1️⃣None

2️⃣Partial cloning

3️⃣Shallow cloning✔️

4️⃣Deep Cloning

🅰️Implementing the Cloneable interface and invoking super.clone() typically results in shallow cloning. Shallow cloning creates a new object and copies the fields of the original object to the new object. However, if the fields of the original object are reference types, they will still refer to the same objects in both the original and cloned objects. This means changes to the objects referenced by these fields will be reflected in both the original and cloned objects.

🧨4. Premgen space has been replaced by which of these in Java 8?

🅰️Metaspace

🧨5. Correct examples of functional interface 

1. Java.Lang. runnable✔️

2.java.util.List

3.java.io.InputStream

4.java.util.Comparator✔️

🅰️.Both Runnable and Comparator are examples of functional interfaces in Java. They have a single abstract method (SAM), making them functional interfaces, which can be used with lambda expressions.

🧨6.Void accept (T t) is a method of

1. Consumer✔️

2. Producer 

3. Both 

4. None

🧨7. What are Intermediate operations? Select all that apply

1. Intermediate operations are mostly Lambda functions

2. Used to collect the processed stream data✔️

3. Transforms stream into another stream✔️

4. Operations are applied in random order
🅰️Intermediate operations in Java streams are operations that transform one stream into another. They do not produce a final result but instead return a new stream that can be used for further processing. Additionally, the order in which intermediate operations are applied can impact the performance, but they are not applied in a random order. The order is determined by the stream pipeline and is generally left-to-right as they appear in the pipeline.


💠8. Which of the following is the correct lambda expression which add two numbers and return their sum? 

1.( Int a, int b) ->{return a + b;};

2. (a,b) -> {return a + b;};

3. Both ✔️

4. None

🅰️.  3



💠9.Given below code snippet

interface A { 

int aMethod(String s); 

}

Which of the following are valid stat

Pick ONE option

1️⃣A a = a -> a.length();✔️

2️⃣Ax = y -> {return y;};

3️⃣As="2"> Integer.parseInt(s);

4️⃣A b = (String s) 1;



🅰️. 1

💠10. Sorting speed had been improved significantly on multi - core machines by using. Pick one option

1. Arrays.parallelSort✔️

2. Arrays.sort

3. COLLECTION.PARRALLELSort

4. Arrays.sortParallelly

🅰️. 1



💠11. import java.util.function.BiFunction;

public class StringCompare {

public static void main(String args[]) {

BiFunction <String, String, Boolean > compare. x.equals(y);  #line1

} System.out.println(compareString.apply("Java8",

Pick ONE option

1️⃣This program results in a compiler error in the line marked with #1✔️

2️⃣This program prints: true

3️⃣This program prints: false

4️⃣This program prints: ("Java8", "Java8") -> "Java8".equals("Java8")

🅰️The code has a few issues. It incorrectly uses compare instead of BiFunction. Additionally, the lambda expression is not properly formed for BiFunction. 

Correct way :- BiFunction<String, String, Boolean> compareString = (x, y) -> x.equals(y);



💠12. When users enters invalid data, which HTTP status code should be returned?

🅰️400, because this status code indicates that the server cannot or will not process the request because the received data is invalid, incomplete, or 
otherwise in error. It's a general-purpose client error status.

13. Microservices architecture is which coupled?

🅰️loosely coupled design

In a microservices architecture, services are designed to be independent, deployable units that communicate with each other through well-defined APIs. 
This loose coupling allows each microservice to evolve independently, making it easier to develop, deploy, and scale individual services without affecting
the entire system.

💠14. Which annotation is used to inject the properties into the springboot-based microservice?

🅰️@Value annotation is commonly used to inject properties from configuration files or other sources into Spring Beans. You can use it to inject values directly into fields, methods, or constructor parameter



🧨15. What are the two properties of transactional annotations?

1. readOnlyClassName

2. Propagation✔️
Yesterday, I had a technical interview for AWS Cloud Full Stack at IBM. I am sharing the questions for reference. This is the third post of IBM interview questions.

🔶16. What are the architectural constraints of rest API?

🅰️✔️Statelessness: Each request from a client contains all the information the server needs to fulfill that request. The server should not store any information about the client's state between requests.

✔️Client-Server: The client and server are separate entities that communicate over a network. The client is responsible for the user interface and user experience, while the server is responsible for processing requests, managing resources, and handling business logic.

✔️Uniform Interface: A uniform and consistent way to interact with resources. It includes a set of well-defined constraints such as resource identification through URIs, representation of resources, and self-descriptive messages.

✔️Cacheability: Responses from the server can be explicitly marked as cacheable or non-cacheable. This improves efficiency and reduces the need for repeated requests to the server.

✔️Layered System: The architecture can be composed of multiple layers, where each layer has a specific responsibility. This helps in improving scalability and flexibility.

✔️Code on Demand (Optional): The server can extend the functionality of a client by transferring executable code (e.g., JavaScript) to be executed by the client. This constraint is optional in REST.



🔶17. Which advice is executed once a joint point finishes?

🅰️After advice



🔶18. When a client registers Eureka, what is the metadata information it shares with Eureka?

🅰️When a client registers with Eureka, it typically shares the following metadata information:

Hostname, Port number & Health indicator URI

3. rollbackForClassName

4. rollbackFor✔️
